import {
    collection,
    getDocs,
    deleteDoc,
    doc,
    setDoc,
} from 'firebase/firestore';
import { db } from '../utils/firebase';

interface MigrationCallbacks {
    onProgress?: (message: string, details?: string) => void;
    onStepComplete?: (message: string, details?: string) => void;
    onError?: (message: string, details?: string) => void;
}

export const migratePortfolioIds = async (callbacks?: MigrationCallbacks) => {
    const { onProgress, onStepComplete, onError } = callbacks || {};

    try {
        onProgress?.('üîÑ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó ID –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...');

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–µ–∫—Ç–∏
        onProgress?.('üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤...');
        const querySnapshot = await getDocs(
            collection(db, 'portfolioCardData'),
        );
        const existingProjects: any[] = [];

        querySnapshot.forEach((doc) => {
            existingProjects.push({
                ...doc.data(),
                oldId: doc.id,
            });
        });

        onStepComplete?.(
            `üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${existingProjects.length} –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`,
            `–ü—Ä–æ–µ–∫—Ç–∏: ${existingProjects.map((p) => p.oldId).join(', ')}`,
        );

        if (existingProjects.length === 0) {
            onStepComplete?.('‚ÑπÔ∏è –ù–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó');
            return {
                success: true,
                message: '–ù–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó',
            };
        }

        // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∫–æ–º (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        onProgress?.('üîÑ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑–∞ —Ä–æ–∫–æ–º...');
        existingProjects.sort((a, b) => (b.year || 0) - (a.year || 0));
        onStepComplete?.('‚úÖ –ü—Ä–æ–µ–∫—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Ä–æ–∫–æ–º (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)');

        // –ü—Ä–∏—Å–≤–æ—é—î–º–æ –Ω–æ–≤—ñ —á–∏—Å–ª–æ–≤—ñ ID
        let migratedCount = 0;
        let skippedCount = 0;

        for (let i = 0; i < existingProjects.length; i++) {
            const project = existingProjects[i];
            const newNumericId = i + 1;

            onProgress?.(
                `üîÑ –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–µ–∫—Ç—É ${i + 1}/${existingProjects.length}`,
                `–ü—Ä–æ–µ–∫—Ç: ${project.title || project.oldId} -> ID: ${newNumericId}`,
            );

            // –Ø–∫—â–æ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if (
                !isNaN(parseInt(project.oldId)) &&
                project.numericId === newNumericId
            ) {
                onStepComplete?.(
                    `‚úÖ –ü—Ä–æ–µ–∫—Ç ${project.oldId} –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID`,
                    `ID: ${newNumericId} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω`,
                );
                skippedCount++;
                continue;
            }

            try {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑ —á–∏—Å–ª–æ–≤–∏–º ID
                const newDocRef = doc(
                    db,
                    'portfolioCardData',
                    newNumericId.toString(),
                );
                const { oldId, ...projectData } = project;

                await setDoc(newDocRef, {
                    ...projectData,
                    numericId: newNumericId,
                });

                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—è–∫—â–æ ID —Ä—ñ–∑–Ω—ñ)
                if (project.oldId !== newNumericId.toString()) {
                    const oldDocRef = doc(
                        db,
                        'portfolioCardData',
                        project.oldId,
                    );
                    await deleteDoc(oldDocRef);
                    onStepComplete?.(
                        `üîÑ –ü—Ä–æ–µ–∫—Ç –º—ñ–≥—Ä–æ–≤–∞–Ω–æ: ${project.oldId} -> ${newNumericId}`,
                        `–°—Ç–∞—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∑ ID: ${newNumericId}`,
                    );
                } else {
                    onStepComplete?.(
                        `‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ID ${newNumericId}`,
                        `–î–æ–¥–∞–Ω–æ numericId –ø–æ–ª–µ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞`,
                    );
                }

                migratedCount++;
            } catch (error) {
                const errorMsg = `–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É ${project.oldId}`;
                const errorDetails =
                    error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
                onError?.(errorMsg, errorDetails);
                console.error(errorMsg, error);
            }
        }

        const summaryMessage = `–ú—ñ–≥—Ä–æ–≤–∞–Ω–æ ${migratedCount} –ø—Ä–æ–µ–∫—Ç—ñ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`;
        onStepComplete?.('‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!', summaryMessage);

        return {
            success: true,
            message: summaryMessage,
        };
    } catch (error) {
        const errorMessage =
            error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        onError?.('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó', errorMessage);
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
        return {
            success: false,
            error: errorMessage,
        };
    }
};
