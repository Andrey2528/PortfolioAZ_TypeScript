import React, { useState } from 'react';
import { migratePortfolioIds } from '../../utils/migrateIds';

interface MigrationStep {
    id: string;
    status: 'pending' | 'processing' | 'success' | 'error';
    message: string;
    details?: string;
}

interface MigrationModalProps {
    isOpen: boolean;
    onClose: () => void;
    onComplete: () => void;
}

const MigrationModal: React.FC<MigrationModalProps> = ({
    isOpen,
    onClose,
    onComplete,
}) => {
    const [isRunning, setIsRunning] = useState(false);
    const [steps, setSteps] = useState<MigrationStep[]>([]);
    const [finalResult, setFinalResult] = useState<{
        success: boolean;
        message?: string;
        error?: string;
    } | null>(null);

    const addStep = (step: Omit<MigrationStep, 'id'>) => {
        const newStep: MigrationStep = {
            ...step,
            id: Date.now().toString(),
        };
        setSteps((prev) => [...prev, newStep]);
    };

    const updateLastStep = (updates: Partial<MigrationStep>) => {
        setSteps((prev) => {
            const newSteps = [...prev];
            if (newSteps.length > 0) {
                newSteps[newSteps.length - 1] = {
                    ...newSteps[newSteps.length - 1],
                    ...updates,
                };
            }
            return newSteps;
        });
    };

    const runMigration = async () => {
        setIsRunning(true);
        setSteps([]);
        setFinalResult(null);

        try {
            addStep({
                status: 'processing',
                message: '–ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó ID –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...',
            });

            const result = await migratePortfolioIds({
                onProgress: (message: string, details?: string) => {
                    addStep({
                        status: 'processing',
                        message,
                        details,
                    });
                },
                onStepComplete: (message: string, details?: string) => {
                    updateLastStep({
                        status: 'success',
                        message,
                        details,
                    });
                },
                onError: (message: string, details?: string) => {
                    updateLastStep({
                        status: 'error',
                        message,
                        details,
                    });
                },
            });

            setFinalResult(result);

            if (result.success) {
                addStep({
                    status: 'success',
                    message: '‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!',
                    details: result.message,
                });
            } else {
                addStep({
                    status: 'error',
                    message: '‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó',
                    details: result.error,
                });
            }
        } catch (error) {
            const errorMessage =
                error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
            addStep({
                status: 'error',
                message: '‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞',
                details: errorMessage,
            });
            setFinalResult({
                success: false,
                message: errorMessage,
            });
        } finally {
            setIsRunning(false);
        }
    };

    const handleClose = () => {
        if (finalResult?.success) {
            onComplete();
        }
        onClose();
    };

    const getStepIcon = (status: MigrationStep['status']) => {
        switch (status) {
            case 'pending':
                return '‚è≥';
            case 'processing':
                return 'üîÑ';
            case 'success':
                return '‚úÖ';
            case 'error':
                return '‚ùå';
            default:
                return 'üìÑ';
        }
    };

    if (!isOpen) return null;

    return (
        <div className="migration-modal-overlay">
            <div className="migration-modal">
                <div className="migration-header">
                    <h2>üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è ID –ø—Ä–æ–µ–∫—Ç—ñ–≤</h2>
                    <p>–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö ID –Ω–∞ —á–∏—Å–ª–æ–≤—ñ (1, 2, 3...)</p>
                </div>

                <div className="migration-content">
                    {steps.length === 0 && !isRunning && (
                        <div className="migration-info">
                            <div className="info-block">
                                <h3>üìã –©–æ —Ä–æ–±–∏—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—è:</h3>
                                <ul>
                                    <li>–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–µ–∫—Ç–∏</li>
                                    <li>
                                        –°–æ—Ä—Ç—É—î —ó—Ö –∑–∞ —Ä–æ–∫–æ–º (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                                    </li>
                                    <li>–ü—Ä–∏—Å–≤–æ—é—î —á–∏—Å–ª–æ–≤—ñ ID (1, 2, 3...)</li>
                                    <li>–û–Ω–æ–≤–ª—é—î –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö</li>
                                    <li>
                                        –í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑—ñ —Å–∫–ª–∞–¥–Ω–∏–º–∏ ID
                                    </li>
                                </ul>
                            </div>

                            <div className="warning-block">
                                <h3>‚ö†Ô∏è –£–≤–∞–≥–∞:</h3>
                                <p>
                                    –¶—è –æ–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞. –í—Å—ñ —ñ—Å–Ω—É—é—á—ñ ID
                                    –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ –Ω–∞ —á–∏—Å–ª–æ–≤—ñ.
                                </p>
                            </div>
                        </div>
                    )}

                    {steps.length > 0 && (
                        <div className="migration-steps">
                            {steps.map((step) => (
                                <div
                                    key={step.id}
                                    className={`migration-step ${step.status}`}
                                >
                                    <div className="step-header">
                                        <span className="step-icon">
                                            {getStepIcon(step.status)}
                                        </span>
                                        <span className="step-message">
                                            {step.message}
                                        </span>
                                    </div>
                                    {step.details && (
                                        <div className="step-details">
                                            {step.details}
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}

                    {finalResult && (
                        <div
                            className={`migration-result ${finalResult.success ? 'success' : 'error'}`}
                        >
                            <h3>
                                {finalResult.success
                                    ? 'üéâ –£—Å–ø—ñ—Ö!'
                                    : 'üí• –ü–æ–º–∏–ª–∫–∞!'}
                            </h3>
                            <p>
                                {finalResult.message ||
                                    finalResult.error ||
                                    '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                            </p>
                        </div>
                    )}
                </div>

                <div className="migration-actions">
                    {!isRunning && !finalResult && (
                        <>
                            <button
                                className="btn btn-secondary"
                                onClick={onClose}
                            >
                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                            </button>
                            <button
                                className="btn btn-warning"
                                onClick={runMigration}
                            >
                                üöÄ –ü–æ—á–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é
                            </button>
                        </>
                    )}

                    {isRunning && (
                        <div className="migration-progress">
                            <div className="spinner"></div>
                            <span>–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –º—ñ–≥—Ä–∞—Ü—ñ—è...</span>
                        </div>
                    )}

                    {finalResult && (
                        <button
                            className="btn btn-primary"
                            onClick={handleClose}
                        >
                            {finalResult.success ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : '‚ùå –ó–∞–∫—Ä–∏—Ç–∏'}
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};

export default MigrationModal;
