import React, { useState, useEffect } from 'react';
import {
    getCertificates,
    getSkills,
    getSocialLinks,
} from '../../api/connectDB/dataAPI';
import { fetchPortfolioCards } from '../../api/connectDB/adminAPI';
import { seedInitialData, seedPortfolioData } from '../../utils/seedData';
import MigrationModal from './MigrationModal';
import '../../shared/styles/components/Admin/AdminDashboardHome.scss';

interface SiteStats {
    portfolio: number;
    certificates: number;
    skills: number;
    social: number;
    totalProjects: number;
    lastUpdated: string;
}

interface AdminDashboardHomeProps {
    onRefreshData: () => void;
}

const AdminDashboardHome: React.FC<AdminDashboardHomeProps> = ({
    onRefreshData,
}) => {
    const [stats, setStats] = useState<SiteStats>({
        portfolio: 0,
        certificates: 0,
        skills: 0,
        social: 0,
        totalProjects: 0,
        lastUpdated: '',
    });
    const [loading, setLoading] = useState(true);
    const [seeding, setSeeding] = useState(false);
    const [showMigrationModal, setShowMigrationModal] = useState(false);

    useEffect(() => {
        loadStats();
    }, []);

    const loadStats = async () => {
        setLoading(true);
        try {
            const [portfolio, certificates, skills, social] = await Promise.all(
                [
                    fetchPortfolioCards(),
                    getCertificates(),
                    getSkills(),
                    getSocialLinks(),
                ],
            );

            const totalProjects =
                portfolio.length +
                certificates.length +
                skills.length +
                social.length;

            setStats({
                portfolio: portfolio.length,
                certificates: certificates.length,
                skills: skills.length,
                social: social.length,
                totalProjects,
                lastUpdated: new Date().toLocaleString('uk-UA'),
            });
        } catch (error) {
            console.error('Error loading stats:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleSeedData = async () => {
        if (
            !confirm(
                '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ? –¶–µ –º–æ–∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ.',
            )
        ) {
            return;
        }

        setSeeding(true);
        try {
            const result = await seedInitialData();
            if (result.success) {
                alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
                loadStats();
                onRefreshData();
            } else {
                alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ' + result.message);
            }
        } catch (error) {
            console.error('Error seeding data:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        } finally {
            setSeeding(false);
        }
    };

    const handleSeedPortfolio = async () => {
        if (
            !confirm(
                '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ? –¶–µ –º–æ–∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–µ–∫—Ç–∏.',
            )
        ) {
            return;
        }

        setSeeding(true);
        try {
            const result = await seedPortfolioData();
            if (result.success) {
                alert(result.message);
                loadStats();
                onRefreshData();
            } else {
                alert(
                    '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: ' +
                        (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'),
                );
            }
        } catch (error) {
            console.error('Error seeding portfolio:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ');
        } finally {
            setSeeding(false);
        }
    };

    const handleMigrateIds = () => {
        setShowMigrationModal(true);
    };

    const handleMigrationComplete = () => {
        loadStats();
        onRefreshData();
        setShowMigrationModal(false);
    };

    const getProgressColor = (value: number, max: number = 50) => {
        const percentage = (value / max) * 100;
        if (percentage < 30) return 'low';
        if (percentage < 70) return 'medium';
        return 'high';
    };

    if (loading) {
        return (
            <div className="admin-home">
                <div className="loading-stats">
                    <div className="spinner"></div>
                    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="admin-home">
            <div className="welcome-section">
                <h1>üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∞–π—Ç–æ–º</h1>
                <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤–∞—à–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∑ –æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ü—è</p>
                <div className="last-updated">
                    –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats.lastUpdated}
                </div>
            </div>

            <div className="stats-overview">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç—É</h2>

                <div className="stats-grid">
                    <div className="stat-card portfolio">
                        <div className="stat-icon">üíº</div>
                        <div className="stat-content">
                            <h3>–ü—Ä–æ–µ–∫—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ</h3>
                            <div className="stat-number">{stats.portfolio}</div>
                            <div
                                className={`stat-progress ${getProgressColor(stats.portfolio, 20)}`}
                            >
                                <div
                                    className="progress-bar"
                                    style={{
                                        width: `${Math.min((stats.portfolio / 20) * 100, 100)}%`,
                                    }}
                                ></div>
                            </div>
                            <p>–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏</p>
                        </div>
                    </div>

                    <div className="stat-card certificates">
                        <div className="stat-icon">üèÜ</div>
                        <div className="stat-content">
                            <h3>–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏</h3>
                            <div className="stat-number">
                                {stats.certificates}
                            </div>
                            <div
                                className={`stat-progress ${getProgressColor(stats.certificates, 15)}`}
                            >
                                <div
                                    className="progress-bar"
                                    style={{
                                        width: `${Math.min((stats.certificates / 15) * 100, 100)}%`,
                                    }}
                                ></div>
                            </div>
                            <p>–ó–¥–æ–±—É—Ç—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏</p>
                        </div>
                    </div>

                    <div className="stat-card skills">
                        <div className="stat-icon">üéØ</div>
                        <div className="stat-content">
                            <h3>–ù–∞–≤–∏—á–∫–∏</h3>
                            <div className="stat-number">{stats.skills}</div>
                            <div
                                className={`stat-progress ${getProgressColor(stats.skills, 30)}`}
                            >
                                <div
                                    className="progress-bar"
                                    style={{
                                        width: `${Math.min((stats.skills / 30) * 100, 100)}%`,
                                    }}
                                ></div>
                            </div>
                            <p>–û—Å–≤–æ—î–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó</p>
                        </div>
                    </div>

                    <div className="stat-card social">
                        <div className="stat-icon">üîó</div>
                        <div className="stat-content">
                            <h3>–°–æ—Ü. –º–µ—Ä–µ–∂—ñ</h3>
                            <div className="stat-number">{stats.social}</div>
                            <div
                                className={`stat-progress ${getProgressColor(stats.social, 10)}`}
                            >
                                <div
                                    className="progress-bar"
                                    style={{
                                        width: `${Math.min((stats.social / 10) * 100, 100)}%`,
                                    }}
                                ></div>
                            </div>
                            <p>–ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏</p>
                        </div>
                    </div>
                </div>

                <div className="total-stats">
                    <div className="total-card">
                        <h3>üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <div className="total-content">
                            <div className="total-number">
                                {stats.totalProjects}
                            </div>
                            <p>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="admin-actions-section">
                <h2>‚öôÔ∏è –î—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</h2>
                <p>–û—Å–Ω–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏</p>

                <div className="admin-actions">
                    <div className="action-card seed-all">
                        <div className="action-icon">üå±</div>
                        <div className="action-content">
                            <h3>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ</h3>
                            <p>
                                –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ: –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ,
                                —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏, –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
                            </p>
                            <button
                                className="btn btn-secondary"
                                onClick={handleSeedData}
                                disabled={seeding}
                            >
                                {seeding
                                    ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...'
                                    : 'üå± –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ'}
                            </button>
                        </div>
                    </div>

                    <div className="action-card seed-portfolio">
                        <div className="action-icon">üíº</div>
                        <div className="action-content">
                            <h3>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ</h3>
                            <p>
                                –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∑
                                –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                            </p>
                            <button
                                className="btn btn-primary"
                                onClick={handleSeedPortfolio}
                                disabled={seeding}
                            >
                                {seeding
                                    ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...'
                                    : 'üíº –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ'}
                            </button>
                        </div>
                    </div>

                    <div className="action-card migrate">
                        <div className="action-icon">üîÑ</div>
                        <div className="action-content">
                            <h3>–ú—ñ–≥—Ä—É–≤–∞—Ç–∏ ID</h3>
                            <p>
                                –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å–∫–ª–∞–¥–Ω—ñ ID –ø—Ä–æ–µ–∫—Ç—ñ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç—ñ —á–∏—Å–ª–æ–≤—ñ
                                (1, 2, 3...)
                            </p>
                            <button
                                className="btn btn-warning"
                                onClick={handleMigrateIds}
                            >
                                üîÑ –ú—ñ–≥—Ä—É–≤–∞—Ç–∏ ID
                            </button>
                        </div>
                    </div>

                    <div className="action-card refresh">
                        <div className="action-icon">üîÑ</div>
                        <div className="action-content">
                            <h3>–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</h3>
                            <p>
                                –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î
                                –¥–∞–Ω—ñ
                            </p>
                            <button
                                className="btn btn-info"
                                onClick={loadStats}
                                disabled={loading}
                            >
                                {loading ? '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...' : 'üîÑ –û–Ω–æ–≤–∏—Ç–∏'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <MigrationModal
                isOpen={showMigrationModal}
                onClose={() => setShowMigrationModal(false)}
                onComplete={handleMigrationComplete}
            />
        </div>
    );
};

export default AdminDashboardHome;
