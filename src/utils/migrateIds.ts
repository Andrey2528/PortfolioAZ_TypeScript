import {
    collection,
    getDocs,
    deleteDoc,
    doc,
    setDoc,
} from 'firebase/firestore';
import { db } from '../utils/firebase';

export const migratePortfolioIds = async () => {
    try {
        console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó ID –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...');

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–µ–∫—Ç–∏
        const querySnapshot = await getDocs(
            collection(db, 'portfolioCardData'),
        );
        const existingProjects: any[] = [];

        querySnapshot.forEach((doc) => {
            existingProjects.push({
                ...doc.data(),
                oldId: doc.id,
            });
        });

        console.log(
            `üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${existingProjects.length} –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó`,
        );

        // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∫–æ–º (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        existingProjects.sort((a, b) => (b.year || 0) - (a.year || 0));

        // –ü—Ä–∏—Å–≤–æ—é—î–º–æ –Ω–æ–≤—ñ —á–∏—Å–ª–æ–≤—ñ ID
        for (let i = 0; i < existingProjects.length; i++) {
            const project = existingProjects[i];
            const newNumericId = i + 1;

            // –Ø–∫—â–æ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if (
                !isNaN(parseInt(project.oldId)) &&
                project.numericId === newNumericId
            ) {
                console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${project.oldId} –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID`);
                continue;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑ —á–∏—Å–ª–æ–≤–∏–º ID
            const newDocRef = doc(
                db,
                'portfolioCardData',
                newNumericId.toString(),
            );
            const { oldId, ...projectData } = project;

            await setDoc(newDocRef, {
                ...projectData,
                numericId: newNumericId,
            });

            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—è–∫—â–æ ID —Ä—ñ–∑–Ω—ñ)
            if (project.oldId !== newNumericId.toString()) {
                const oldDocRef = doc(db, 'portfolioCardData', project.oldId);
                await deleteDoc(oldDocRef);
                console.log(`üîÑ –ü—Ä–æ–µ–∫—Ç ${project.oldId} -> ${newNumericId}`);
            }
        }

        console.log('‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        return {
            success: true,
            message: `–ú—ñ–≥—Ä–æ–≤–∞–Ω–æ ${existingProjects.length} –ø—Ä–æ–µ–∫—Ç—ñ–≤`,
        };
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
        };
    }
};
